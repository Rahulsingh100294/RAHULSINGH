-- Windows Function Assignment Question
-- 1. **Rank the customers based on the total amount they've spent on rentals.**
use mavenmovies;
SELECT customer.customer_id, customer.first_name, customer.last_name, SUM(payment.amount) AS total_spent, 
RANK() OVER (ORDER BY SUM(payment.amount) DESC) AS RANKS
FROM customer
LEFT JOIN payment ON customer.customer_id = payment.customer_id
GROUP BY customer.customer_id, customer.first_name, customer.last_name
ORDER BY total_spent DESC;

-- 2. **Calculate the cumulative revenue generated by each film over time.*
select film.title, rental.rental_id, sum(payment.amount) over (partition by film.film_id
order by rental.rental_date ) as 'CUMELATIVE REVENUE' from film
join inventory on film.film_id = inventory.film_id 
join rental on inventory.inventory_id = rental.inventory_id 
join payment on rental.rental_id = payment.rental_id 
order by film.title, rental.rental_date; 

-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**
select film.title, avg(film.rental_duration) over ( partition by film.length ) 
as 'AVERAGE_RENTAL_DURATION'
FROM film where film.length between 90 and 100;

-- 4. **Identify the top 3 films in each category based on their rental counts.**
WITH RankedFilms AS (
    SELECT fc.category_id, fc.film_id, f.title,
        ROW_NUMBER() OVER (PARTITION BY fc.category_id ORDER BY COUNT(r.rental_id) DESC) AS ranking
    FROM film_category fc
    JOIN rental r ON fc.film_id = r.inventory_id
    JOIN film f ON fc.film_id = f.film_id
    GROUP BY fc.category_id, fc.film_id, f.title
)
SELECT category_id, film_id, title, ranking
FROM RankedFilms
WHERE ranking <= 3;


-- 5. **Calculate the difference in rental counts between each customer's total rentals and the 
-- average rentals across all customers.**
select customer.customer_id, count(rental.rental_id) - avg(count(rental.rental_id)) over() as 'RENTAL_COUNT_DIFFRENCE'
from customer 
left join rental  on customer.customer_id = rental.customer_id
group by customer.customer_id;


-- 6. **Find the monthly revenue trend for the entire rental store over time.*
select date_format(payment_date , '%y-%m') as MONTH , sum(amount) over (order by 
date_format(payment_date , '%y-%m')) as REVENUE from payment;

-- 7 **Identify the customers whose total spending on rentals falls within the top 20% of all customers.*
SELECT 
    customer_id,
    CONCAT(first_name, ' ', last_name) AS customer_name,
    total_amount_spent
FROM (
    SELECT 
        c.customer_id,
        c.first_name,
        c.last_name,
        SUM(p.amount) AS total_amount_spent,
        PERCENT_RANK() OVER (ORDER BY SUM(p.amount) DESC) AS pct_rank
    FROM 
        customer c
    JOIN 
        payment p ON c.customer_id = p.customer_id
    GROUP BY 
        c.customer_id
) ranked_customers
WHERE 
    pct_rank <= 0.2
ORDER BY 
    total_amount_spent DESC;
    
    -- 8  **Calculate the running total of rentals per category, ordered by rental count.**
    SELECT
    category.name AS category_name,
    COUNT(rental.rental_id) AS rental_count,
    SUM(COUNT(rental.rental_id)) OVER (PARTITION BY category.name ORDER BY COUNT(rental.rental_id) DESC) AS running_total
FROM
    film
JOIN
    film_category ON film.film_id = film_category.film_id
JOIN
    category ON film_category.category_id = category.category_id
JOIN
    inventory ON film.film_id = inventory.film_id
JOIN
    rental ON inventory.inventory_id = rental.inventory_id
GROUP BY
    category.name
ORDER BY
    rental_count DESC;


-- 9. Find the films that have been rented less than the average rental count for their respective
--  categories.
WITH CategoryAvgRental AS (
    SELECT
        category.name AS category_name,
        AVG(COUNT(rental.rental_id)) OVER (PARTITION BY category.name) AS avg_rental_count
    FROM
        film
    JOIN
        film_category ON film.film_id = film_category.film_id
    JOIN
        category ON film_category.category_id = category.category_id
    JOIN
        inventory ON film.film_id = inventory.film_id
    JOIN
        rental ON inventory.inventory_id = rental.inventory_id
    GROUP BY
        category.name, film.title
)
SELECT
    film.title AS film_title,
    category.name AS category_name,
    COUNT(rental.rental_id) AS rental_count,
    c.avg_rental_count
FROM
    film
JOIN
    film_category ON film.film_id = film_category.film_id
JOIN
    category ON film_category.category_id = category.category_id
JOIN
    inventory ON film.film_id = inventory.film_id
JOIN
    rental ON inventory.inventory_id = rental.inventory_id
JOIN
    CategoryAvgRental c ON category.name = c.category_name
GROUP BY
    film.title, category.name, c.avg_rental_count
HAVING
    COUNT(rental.rental_id) < c.avg_rental_count
ORDER BY
    category.name, film.title;

-- 10. Identify the top 5 months with the highest revenue and display the revenue generated in each month.
SELECT DATE_FORMAT(payment_date, '%Y-%m') AS month, SUM(amount) AS revenue
FROM payment
GROUP BY month
ORDER BY revenue DESC
LIMIT 5;


    
    